pipeline {
    environment {
        prj_name = """${JOB_NAME.split('/')[0]}"""
        apl_name = """${JOB_NAME.minus(JOB_NAME.split('/')[0] + '/' + JOB_NAME.split('/')[0] + '-')}"""
        registryHML = "registry.hml.fiesc.com.br/${prj_name}/${apl_name}"
        registryCredentialHML = 'registry-hml'

        imageRepository = "docker-registry.default.svc:5000/${prj_name}/${apl_name}:HML"

        okdHmlApiHost = 'master-okd.hml.fiesc.com.br'
        okdHmlTokenBearer = credentials('saudemental-hml-job-sql-token')
    }
    agent any
    stages {
        stage('Build PHP HML Image') {
            steps {
                dir("${env.WORKSPACE}/${env.SOURCE_REPOSITORY_CONTEXT_DIR}") {
                    sh "docker build -f docker/php/Dockerfile --build-arg BUILD_APP_ENV='${env.BUILD_APP_ENV}' -t ${registryHML}:HML ."
                }
            }
        }
        stage('Build Nginx HML Image') {
            steps {
                dir("${env.WORKSPACE}/${env.SOURCE_REPOSITORY_CONTEXT_DIR}") {
                    sh "docker build -f docker/nginx/Dockerfile -t ${registryHML}-nginx:HML ."
                }
            }
        }
        stage('Push Nginx Docker Image to HML') {
            steps {
                script {
                    docker.withRegistry('https://registry.hml.fiesc.com.br', registryCredentialHML) {
                        sh "docker push ${registryHML}-nginx:HML"
                    }
                }
            }
        }
        stage('Push PHP Docker Image to HML') {
            steps {
                script {
                    docker.withRegistry('https://registry.hml.fiesc.com.br', registryCredentialHML) {
                        sh "docker push ${registryHML}:HML"
                    }
                }
            }
        }
        stage('Apply Migrations') {
            steps {
                script {
                    echo "Drop job"
                    jsondc  = "{\"propagationPolicy\":\"Foreground\"}"
                    sh("curl -sSk \
                        -X DELETE \
                        -d '${jsondc}' \
                        -H 'Authorization: Bearer ${okdHmlTokenBearer}' \
                        -H 'Accept: application/json' \
                        -H 'Content-Type: application/json' \
                        https://${okdHmlApiHost}/apis/batch/v1/namespaces/${prj_name}/jobs/${JOB_MIGRATION_NAME}")


                    sleep(1)
                    jsondc  = getJobCreationJson(JOB_MIGRATION_NAME, "php artisan migrate --force")
                    sh("curl -sSk \
                        -X POST \
                        -d '${jsondc}' \
                        -H 'Authorization: Bearer ${okdHmlTokenBearer}' \
                        -H 'Accept: application/json' \
                        -H 'Content-Type: application/json' \
                        https://${okdHmlApiHost}/apis/batch/v1/namespaces/${prj_name}/jobs")
                }
            }
        }
    }
}

def getJobCreationJson(String jobName, String jobCommand) {
    return """
        {
            "kind": "Job",
            "apiVersion": "batch/v1",
            "metadata": {
                "name": "${jobName}",
                "namespace": "${prj_name}"
            },
            "spec": {
                "backoffLimit": "1",
                "template": {
                    "spec": {
                        "containers": [{
                            "name": "${jobName}",
                            "image": "${imageRepository}",
                            "command": [
                                "sh", "-c", "${jobCommand}"
                            ],
                            "imagePullPolicy": "Always",
                            "envFrom": ${JOB_ENV_FROM},
                            "resources": {
                                "limits": {
                                    "cpu": "500m",
                                    "memory": "512Mi"
                                },
                                "requests": {
                                    "cpu": "200m",
                                    "memory": "256Mi"
                                }
                            }
                        }],
                        "restartPolicy": "Never"
                    }
                }
            }
        }
    """
}
